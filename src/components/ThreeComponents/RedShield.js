// import React, { useEffect } from "react";
// import { useLoader } from "@react-three/fiber";
// import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
// import { Mesh } from "three";
 
// export function RedShield() {
//   const gltf = useLoader(
//     GLTFLoader,
//     process.env.PUBLIC_URL + "models/RedShield/RedShield.glb"
//   );
  
//   useEffect(() => {
//     gltf.scene.position.set(0, -0.035, 0);
//     gltf.scene.rotation.set(0, 1, 0);
//     gltf.scene.traverse((object) => {
//       if (object instanceof Mesh) {
//         object.castShadow = true;
//         object.receiveShadow = true;
//         object.material.envMapIntensity = 3;
//         object.material.aoMapIntensity = 10;
//         object.material.emissiveIntensity = 3;
//         object.frustumCulled = false;
//       }
//     });


//   }, [gltf]);
//   return <primitive object={gltf.scene} />;
// }

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

export default function Model({ ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('models/RedShield/RedShield.glb')
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    actions.RedShieldIdle.play();
  })
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="GEOMETRY_group_NEW001" rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <group name="Armature001" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.Root_joint} />
          <group name="Redshield_back_wings">
            <skinnedMesh name="Mesh014" geometry={nodes.Mesh014.geometry} material={materials.t5_low} skeleton={nodes.Mesh014.skeleton} />
            <skinnedMesh name="Mesh014_1" geometry={nodes.Mesh014_1.geometry} material={materials.emissive_ring} skeleton={nodes.Mesh014_1.skeleton } />
          </group>
          <skinnedMesh name="Redshield_helemt_low2001" geometry={nodes.Redshield_helemt_low2001.geometry} material={materials.t3_low} skeleton={nodes.Redshield_helemt_low2001.skeleton} />
          <skinnedMesh name="Redshield_helemt_low3001" geometry={nodes.Redshield_helemt_low3001.geometry} material={materials.t4_low} skeleton={nodes.Redshield_helemt_low3001.skeleton} />
          <skinnedMesh name="Redshield_helemt_low5001" geometry={nodes.Redshield_helemt_low5001.geometry} material={materials.t4_low} skeleton={nodes.Redshield_helemt_low5001.skeleton} />
          <skinnedMesh name="SM_Warhammer_04" geometry={nodes.SM_Warhammer_04.geometry} material={materials.MI_Warhammer_04} skeleton={nodes.SM_Warhammer_04.skeleton} />
          <group name="Redshield_helemt_low001">
            <skinnedMesh name="Mesh010" geometry={nodes.Mesh010.geometry} material={materials.t3_low} skeleton={nodes.Mesh010.skeleton} morphTargetDictionary={nodes.Mesh010.morphTargetDictionary} morphTargetInfluences={nodes.Mesh010.morphTargetInfluences} />
            <skinnedMesh name="Mesh010_1" geometry={nodes.Mesh010_1.geometry} material={materials.t6_low} skeleton={nodes.Mesh010_1.skeleton} morphTargetDictionary={nodes.Mesh010_1.morphTargetDictionary} morphTargetInfluences={nodes.Mesh010_1.morphTargetInfluences} />
            <skinnedMesh name="Mesh010_2" geometry={nodes.Mesh010_2.geometry} material={materials.t2_low} skeleton={nodes.Mesh010_2.skeleton} morphTargetDictionary={nodes.Mesh010_2.morphTargetDictionary} morphTargetInfluences={nodes.Mesh010_2.morphTargetInfluences} />
            <skinnedMesh name="Mesh010_3" geometry={nodes.Mesh010_3.geometry} material={materials.t1_low} skeleton={nodes.Mesh010_3.skeleton} morphTargetDictionary={nodes.Mesh010_3.morphTargetDictionary} morphTargetInfluences={nodes.Mesh010_3.morphTargetInfluences} />
          </group>
        </group>
      </group>
    </group>

  )
}

useGLTF.preload('models/RedShield/RedShield.glb')